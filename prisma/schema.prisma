// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ENABLED
  DISABLED
  LOCKED
  BANNED
}

enum TokenType {
  SESSION
  PASSWORD_RESET
  CSRF
}

model User {
  id                  String     @id @default(cuid())
  email               String     @unique
  password            String
  failedLoginAttempts Int        @default(0)
  status              UserStatus @default(ENABLED)
  profile             Profile?
  roles               Role[]
  tokens              Token[]
  otpEnabled          Boolean    @default(false)
  otpSecret           String?
  otpSecretIV         String?
  otpAuthTag          String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  avatar    File?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id           String   @id @default(cuid())
  originalname String
  encoding     String?
  mimetype     String
  size         Int
  buffer       Bytes
  profile      Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  system      Boolean      @default(false)
  permissions Permission[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Token {
  id        String    @id @default(cuid())
  token     String    @unique
  type      TokenType
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
